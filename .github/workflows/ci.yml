name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  get-lts-versions:
    name: üß± Get LTS Node Versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Fetch Node LTS versions
        id: set-matrix
        run: |
          LTS_VERSIONS=$(curl -s https://raw.githubusercontent.com/nodejs/Release/main/schedule.json | \
            jq -cr 'to_entries | map(select(.value.lts != false and .value.end > (now | strftime("%Y-%m-%d")))) | map(.key)')
          echo "matrix={\"node-version\": $LTS_VERSIONS}" >> $GITHUB_OUTPUT

  lint:
    name: üîç Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - name: Run ESLint
        run: npm run lint

  test:
    name: üß™ Test on Node ${{ matrix.node-version }}
    needs: get-lts-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.get-lts-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Cache npm global
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-global-${{ runner.os }}-${{ matrix.node-version }}
      - run: npm ci
      - name: Run tests
        run: npm test -- --run

  build:
    name: üõ†Ô∏è Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Build complete
        run: |
          echo "‚úÖ All tests passed across Node.js LTS versions"
          echo "‚úÖ ESLint checks completed"
          echo "‚úÖ Library is ready for deployment"

  # Validate that version has been properly bumped in PRs
  version-validation:
    name: üîç Validate Version
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      
      - name: Check version bump
        run: |
          # Get current and published versions
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PUBLISHED_VERSION=$(npm view @far-world-labs/verblets version 2>/dev/null || echo "0.0.0")
          
          echo "üì¶ Current version in package.json: $CURRENT_VERSION"
          echo "üì¶ Published version on npm: $PUBLISHED_VERSION"
          
          # Check if version has been bumped
          if [ "$CURRENT_VERSION" = "$PUBLISHED_VERSION" ]; then
            echo "‚ùå Version has not been bumped!"
            echo "Please bump the version in package.json before merging."
            echo "Run: npm version patch (or minor/major as appropriate)"
            exit 1
          else
            echo "‚úÖ Version has been bumped from $PUBLISHED_VERSION to $CURRENT_VERSION"
          fi
      
      - name: Check git tag consistency
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Check if there's already a git tag for this version
          if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
            echo "‚ùå Git tag v$CURRENT_VERSION already exists!"
            echo "This version has already been tagged. Please bump to a new version."
            exit 1
          else
            echo "‚úÖ No existing git tag for v$CURRENT_VERSION"
          fi
          
          # Validate version format (semantic versioning)
          if echo "$CURRENT_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$'; then
            echo "‚úÖ Version format is valid: $CURRENT_VERSION"
          else
            echo "‚ùå Invalid version format: $CURRENT_VERSION"
            echo "Please use semantic versioning (e.g., 1.2.3)"
            exit 1
          fi

  # Required status check that gates merge operations
  pr-ready-to-merge:
    name: ‚úÖ PR Ready to Merge
    runs-on: ubuntu-latest
    needs: [lint, test, build, version-validation]
    if: github.event_name == 'pull_request'
    steps:
      - name: All checks passed
        run: |
          echo "üéâ All required checks have passed!"
          echo "‚úÖ Linting: Passed"
          echo "‚úÖ Tests: Passed on all LTS Node versions"
          echo "‚úÖ Build: Successful"
          echo "‚úÖ Version: Properly bumped and validated"
          echo ""
          echo "This PR is now ready for squash and merge."

  # Publish to NPM and create git tag
  release:
    name: üöÄ Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      - run: npm ci
      
      - name: Create Git Tag
        run: |
          VERSION=$(node -p "require('./package.json').version")
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"
      
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Version was manually bumped and validated in PR
          npm publish --access public
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Create GitHub release
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Automated release of version $VERSION" \
            --latest
