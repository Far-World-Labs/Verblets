name: CI

on:
  pull_request:
    branches: [ main, develop ]
  push:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  setup:
    name: 🔧 Setup Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-check.outputs.cache-hit }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 🔍 Check for existing cache
        id: cache-check
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
          lookup-only: true
      
      - name: 📦 Install dependencies
        if: steps.cache-check.outputs.cache-hit != 'true'
        run: |
          echo "::group::Installing dependencies"
          if [ -f package-lock.json ]; then
            echo "📦 Found package-lock.json, using npm ci"
            npm ci --prefer-offline --no-audit
          else
            echo "📦 No package-lock.json found, using npm install"
            npm install --prefer-offline --no-audit
          fi
          echo "::endgroup::"
      
      - name: 💾 Cache node_modules
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/cache/save@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
      
      - name: 📊 Job Summary
        run: |
          echo "## 🔧 Setup Complete" >> $GITHUB_STEP_SUMMARY
          echo "- Node.js version: ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Cache hit: ${{ steps.cache-check.outputs.cache-hit }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dependencies installed: $([ '${{ steps.cache-check.outputs.cache-hit }}' = 'true' ] && echo 'from cache' || echo 'fresh install')" >> $GITHUB_STEP_SUMMARY
          echo "- Lock file: $([ -f package-lock.json ] && echo 'package-lock.json found' || echo 'using package.json only')" >> $GITHUB_STEP_SUMMARY

  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 💾 Restore node_modules
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
          fail-on-cache-miss: true
      
      - name: 🔍 Run ESLint
        run: |
          echo "::group::Running ESLint"
          npm run lint 2>&1 | tee lint-output.txt
          echo "::endgroup::"
        continue-on-error: true
        id: lint-step
      
      - name: 📊 Parse lint results
        if: always()
        run: |
          if [ -f lint-output.txt ]; then
            WARNINGS=$(grep -c "warning" lint-output.txt || echo "0")
            ERRORS=$(grep -c "error" lint-output.txt || echo "0")
            
            echo "## 🔍 Lint Results" >> $GITHUB_STEP_SUMMARY
            echo "- Errors: $ERRORS" >> $GITHUB_STEP_SUMMARY
            echo "- Warnings: $WARNINGS" >> $GITHUB_STEP_SUMMARY
            
            if [ "$ERRORS" -gt 0 ] || [ "$WARNINGS" -gt 0 ]; then
              echo "### Issues Found:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              cat lint-output.txt >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "✅ No linting issues found!" >> $GITHUB_STEP_SUMMARY
            fi
          fi

  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: 💾 Restore node_modules
        uses: actions/cache/restore@v3
        with:
          path: |
            node_modules
            ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/package.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-
          fail-on-cache-miss: true
      
      - name: 🧪 Run tests with coverage
        run: |
          echo "::group::Running tests"
          npm run test -- --reporter=verbose --coverage 2>&1 | tee test-output.txt
          echo "::endgroup::"
        continue-on-error: true
        id: test-step
      
      - name: 📊 Parse test results
        if: always()
        run: |
          if [ -f test-output.txt ]; then
            PASSED=$(grep -o "✓.*passed" test-output.txt | wc -l || echo "0")
            FAILED=$(grep -o "✗.*failed" test-output.txt | wc -l || echo "0")
            
            echo "## 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Passed: $PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- ❌ Failed: $FAILED" >> $GITHUB_STEP_SUMMARY
            
            if [ "$FAILED" -gt 0 ]; then
              echo "### Failed Tests:" >> $GITHUB_STEP_SUMMARY
              echo '```' >> $GITHUB_STEP_SUMMARY
              grep -A 5 -B 1 "FAIL\|✗" test-output.txt >> $GITHUB_STEP_SUMMARY || echo "No detailed failure info available"
              echo '```' >> $GITHUB_STEP_SUMMARY
              exit 1
            else
              echo "🎉 All tests passed!" >> $GITHUB_STEP_SUMMARY
            fi
          fi
      
      - name: 📈 Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30
        continue-on-error: true

  summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [setup, lint, test]
    if: always()
    
    steps:
      - name: 📋 Generate final summary
        run: |
          echo "## 🚀 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔧 Setup | ${{ needs.setup.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Lint | ${{ needs.lint.result == 'success' && '✅ Success' || needs.lint.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Test | ${{ needs.test.result == 'success' && '✅ Success' || needs.test.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.lint.result }}" = "success" ] && [ "${{ needs.test.result }}" = "success" ]; then
            echo "🎉 **All checks passed!** Your code is ready to merge." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some checks failed.** Please review the issues above." >> $GITHUB_STEP_SUMMARY
          fi 