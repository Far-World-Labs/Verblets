name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

jobs:
  get-lts-versions:
    name: 🧱 Get LTS Node Versions
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Fetch Node LTS versions
        id: set-matrix
        run: |
          LTS_VERSIONS=$(curl -s https://raw.githubusercontent.com/nodejs/Release/main/schedule.json | \
            jq -cr 'to_entries | map(select(.value.lts != false and .value.end > (now | strftime("%Y-%m-%d")))) | map(.key)')
          echo "matrix={\"node-version\": $LTS_VERSIONS}" >> $GITHUB_OUTPUT

  lint:
    name: 🔍 Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - run: npm ci
      - name: Run ESLint
        run: npm run lint

  test:
    name: 🧪 Test on Node ${{ matrix.node-version }}
    needs: get-lts-versions
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.get-lts-versions.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
      - name: Cache npm global
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-global-${{ runner.os }}-${{ matrix.node-version }}
      - run: npm ci
      - name: Run tests
        run: npm test -- --run

  build:
    name: 🛠️ Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Build complete
        run: |
          echo "✅ All tests passed across Node.js LTS versions"
          echo "✅ ESLint checks completed"
          echo "✅ Library is ready for deployment"

  # Version bump for PRs - creates commit in PR branch
  version-bump:
    name: 📦 Version Bump
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'npm'
      - run: npm ci
      
      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
      
      - name: Version Bump (No Publish)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Use release-it to bump version and create tag, but skip npm publish
          npx release-it --ci --no-npm.publish --no-github.release
          
          # Push the version bump back to the PR branch
          git push origin HEAD:${{ github.head_ref }}

  # Required status check that gates merge operations
  pr-ready-to-merge:
    name: ✅ PR Ready to Merge
    runs-on: ubuntu-latest
    needs: [lint, test, build, version-bump]
    if: github.event_name == 'pull_request'
    steps:
      - name: All checks passed
        run: |
          echo "🎉 All required checks have passed!"
          echo "✅ Linting: Passed"
          echo "✅ Tests: Passed on all LTS Node versions"
          echo "✅ Build: Successful"
          echo "✅ Version: Bumped and ready"
          echo ""
          echo "This PR is now ready for squash and merge."

  # Publish the already-bumped version on merge to main
  release:
    name: 🚀 Publish to NPM
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
      - run: npm ci
      
      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Simple publish - version is already bumped in package.json from PR
          npm publish --access public
          
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get version from package.json
          VERSION=$(node -p "require('./package.json').version")
          
          # Create GitHub release
          gh release create "v$VERSION" \
            --title "Release v$VERSION" \
            --notes "Automated release of version $VERSION" \
            --latest
