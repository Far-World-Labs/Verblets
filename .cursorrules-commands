# Cursor Rules - Command Execution

## Terminal Command Guidelines

### ❌ AVOID - Commands That Stall
- Complex pipe chains: `command | grep -E "pattern1|pattern2" | head -10`
- Multiple pipes with regex: `command | pipe1 | pipe2 | pipe3`
- Nested grep with head/tail: `grep pattern | head | tail`
- Complex regex patterns in pipes: `grep -E "(complex|regex|pattern)"`

### ✅ PREFER - Safe Command Patterns
- Direct command execution: `npm run examples`
- Simple timeout with redirection: `timeout 20s command 2>&1`
- File-based processing: `command > /tmp/file.txt && cat /tmp/file.txt`
- Single pipe with simple patterns: `command | grep "simple"`
- Step-by-step processing using intermediate files

### Command Execution Strategy
1. **Start simple**: Begin with direct command execution
2. **Add complexity gradually**: Test each pipe/filter individually
3. **Use timeouts**: Always include timeout for long-running commands
4. **Break down complex operations**: Use intermediate files for multi-step processing
5. **Test patterns**: Verify grep patterns work before adding to pipes

### When Commands Hang
- Immediately document the hanging command pattern in `guidelines/COMMAND_PATTERNS.md`
- Simplify the command by removing pipes and complex patterns
- Use file-based alternatives instead of complex piping
- Report the stall to the user for pattern tracking

### File-Based Processing Template
```bash
# Instead of: command | complex | pipe | chain
# Use this pattern:
command > /tmp/step1.txt 2>&1
grep "pattern" /tmp/step1.txt > /tmp/step2.txt
head -20 /tmp/step2.txt
```

### Safe Timeout Values
- Testing/debugging: 20 seconds
- Examples/tests: 20 seconds
- Long operations: 60 seconds