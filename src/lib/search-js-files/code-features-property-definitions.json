[
  {
    "name": "singlePurpose",
    "criteria": "Ensure each function performs only one task, avoiding unrelated operations within the function.",
    "score0": "0 indicates the function combines multiple tasks, like reading data, processing it, and displaying results.",
    "score1": "1 indicates the function has a clear single purpose, such as reading data or validating input.",
    "class": ["maintainability-test", "targets-function"],
  },
  {
    "name": "clearNaming",
    "criteria": "Verify function names clearly describe their purpose, making it easier to identify their responsibilities.",
    "score0": "0 indicates the function name like getUserData accurately reflects its purpose, improving code readability.",
    "score1": "1 indicates the function name like processData is vague or misleading, making it difficult to understand its purpose.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "smallSize",
    "criteria": "Check if functions are short and focused.",
    "score0": "0 indicates the function is concise, having 10 or fewer lines of code.",
    "score1": "1 indicates the function is excessively long, with over 50 lines of code.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "limitedParameters",
    "criteria": "Examine the function parameters; a high number may suggest additional responsibilities.",
    "score0": "0 indicates the function has 0-2 parameters, allowing for easy understanding and use.",
    "score1": "1 indicates the function has more than 5 parameters, leading to confusion and decreased readability.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "interfaceToImplementation",
    "criteria": "Examine the interface to the input and output. Does the difficulty of the interface justify the power of its implementation?",
    "score0": "0 indicates the interface is simple and efficient, providing a powerful implementation without unnecessary complexity",
    "score1": "1 indicates the interface is overly complex or convoluted relative to the complexity of its implementation.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "noSideEffects",
    "criteria": "Ensure functions don't produce unexpected changes to external state; check for global variable modifications.",
    "score0": "0 indicates the function has no side effects, as it doesn't modify global variables or external state.",
    "score1": "1 indicates the function modifies global variables or external state, causing unpredictability.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "reusability",
    "criteria": "Verify if functions are modular and can be reused easily in different contexts.",
    "score0": "0 indicates the function is generic, like a formatDate function that can be used in multiple scenarios.",
    "score1": "1 indicates the function is tightly coupled to a specific module, limiting its reusability.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "lowCoupling",
    "criteria": "Check for minimal dependencies between functions, making them more independent and maintainable.",
    "score0": "0 indicates the function has no dependencies on other functions, making it easy to use and maintain.",
    "score1": "1 indicates the function relies heavily on other functions, increasing complexity and reducing maintainability.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "separationOfConcerns",
    "criteria": "Verify if distinct responsibilities are organized into separate functions or modules.",
    "score0": "0 indicates the function is well-organized, with distinct responsibilities like data fetching or validation in separate functions.",
    "score1": "1 indicates the function combines multiple responsibilities like data fetching and processing, leading to confusion.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "easyTestability",
    "criteria": "Check if functions can be tested independently.",
    "score0": "0 indicates the function is stateless and doesn't depend on external systems, making testing straightforward.",
    "score1": "1 indicates the function is difficult to test, possibly due to complex dependencies or state management.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "mixedAbstractionLevels",
    "criteria": "Check if the function speaks in a consistent level of abstraction, avoiding mixing high-level logic with low-level implementation details.",
    "score0": "0 indicates the function has a highly-consistent level of abstraction",
    "score1": "1 indicates the function hopelessly mixes high-level logic with low-level implementation details",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "mixedConcepts",
    "criteria": "Check if the function speaks in a consistent topic, neither confusing the metaphors or changing topics.",
    "score0": "0 indicates the function maintains a consistent topic, like handling user authentication without mixing unrelated topics.",
    "score1": "1 indicates the function changes topics or mixes metaphors, such as combining user authentication with unrelated tasks like data processing.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "businessLogic",
    "criteria": "Look for the presence of business logic within the function, ensuring it's clearly defined and separated from other concerns.",
    "score0": "0 indicates the function has clearly defined business logic, separate from other concerns like data access or UI rendering.",
    "score1": "1 indicates the function mixes business logic with other concerns, like data access, making it difficult to understand and maintain.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "networkCalls",
    "criteria": "Check if the function makes network calls, and if so, ensure they are handled appropriately.",
    "score0": "0 indicates the function doesn't make network calls or handles them correctly, separating concerns and managing errors.",
    "score1": "1 indicates the function makes network calls without proper error handling or mixes them with unrelated responsibilities.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "diskCalls",
    "criteria": "Examine if the function interacts with the filesystem, and if so, ensure it's done appropriately.",
    "score0": "0 indicates the function doesn't interact with the filesystem or does so with proper error handling and separation of concerns.",
    "score1": "1 indicates the function interacts with the filesystem inappropriately, mixing concerns or lacking error handling.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "databaseCalls",
    "criteria": "Verify if the function makes database calls, and if so, ensure they are managed appropriately.",
    "score0": "0 indicates the function doesn't make database calls or handles them correctly, with proper separation of concerns and error handling.",
    "score1": "1 indicates the function makes database calls without proper error handling or mixes them with unrelated responsibilities.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "userInput",
    "criteria": "Check if the function handles user input, and if so, ensure input validation and proper error handling are implemented.",
    "score0": "0 indicates the function doesn't handle user input or handles it correctly with proper validation and error handling.",
    "score1": "1 indicates the function handles user input without proper validation or error handling, potentially leading to security risks.",
    "class": ["maintainability-test", "targets-function"]
  },
    {
    "name": "primitiveObsession",
    "criteria": "Check for the use of primitives when objects or more descriptive data structures would be better, especially in interfaces to other modules.",
    "score0": "0 indicates the function uses appropriate data structures or objects instead of primitives, improving code readability and maintainability.",
    "score1": "9 indicates the function relies heavily on primitives, making the code less readable and harder to maintain.",
    "class": ["maintainability-test", "targets-function"]
  }
]
