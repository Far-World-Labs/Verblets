{
  "type": "object",
  "properties": {
    "purpose": {
      "type": "string",
      "description": "Primary purpose and main functionality of the module (1-2 sentences, max 200 chars)"
    },
    "moduleIntent": {
      "type": "string",
      "description": "Analysis of the module's apparent intent, design philosophy, and architectural decisions. Discusses what problem it solves, how it fits in the system, and what tradeoffs were made (1 paragraph, max 500 chars)"
    },
    "capabilities": {
      "type": "array",
      "items": { 
        "type": "string",
        "maxLength": 100
      },
      "maxItems": 5,
      "description": "Key capabilities and features (up to 5 items, each max 100 chars)"
    },
    "workingState": {
      "type": "object",
      "properties": {
        "assessment": {
          "type": "string",
          "enum": ["production_ready", "functional", "needs_work", "experimental", "broken"],
          "description": "Module maturity and health status. production_ready = fully tested and optimized, functional = works but needs polish, needs_work = has issues to address, experimental = early development, broken = not working"
        },
        "details": {
          "type": "string",
          "maxLength": 300,
          "description": "Detailed assessment of module health (2-3 sentences, max 300 chars)"
        },
        "testCoverage": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Percentage of functionality covered by tests"
        }
      },
      "required": ["assessment", "details", "testCoverage"]
    },
    "architectureGraph": {
      "type": "string",
      "description": "Dot graph representation of module architecture showing key components and data flow. Should include: entry points (main exports), core functions/classes, external integrations (APIs, databases, LLM calls), internal subsystems as clusters, data transformation points, error handling paths, and async operations. Use descriptive node labels with function names, edge labels for data types or operations, different node shapes for different component types (box for functions, cylinder for data stores, diamond for decision points), and cluster boundaries for logical subsystems. Keep between 5-20 nodes for clarity."
    },
    "analysis": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "itemType": {
            "type": "string",
            "enum": ["concern", "recommendation"],
            "description": "Whether this is an observation (concern) or action item (recommendation)"
          },
          "priority": {
            "type": "string",
            "enum": ["low", "medium", "high"],
            "description": "Priority/severity level"
          },
          "category": {
            "type": "string",
            "enum": ["bug", "design", "performance", "testing", "documentation", "refactor", "feature", "integration"],
            "description": "Category of the item"
          },
          "description": {
            "type": "string",
            "maxLength": 200,
            "description": "Clear description of the concern or action (max 200 chars)"
          },
          "location": {
            "type": "string",
            "description": "File path and/or line numbers if applicable"
          },
          "rationale": {
            "type": "string",
            "maxLength": 150,
            "description": "Why this matters or should be done (optional, max 150 chars)"
          }
        },
        "required": ["itemType", "priority", "category", "description"]
      },
      "maxItems": 15,
      "description": "Combined list of concerns and recommendations (up to 15 items)"
    },
    "integrations": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "module": { 
            "type": "string",
            "description": "Module path (e.g., 'src/lib/chatgpt')"
          },
          "type": { 
            "type": "string",
            "enum": ["imports", "exports", "extends", "implements"],
            "description": "Integration type for dependency graph"
          },
          "frequency": {
            "type": "string",
            "enum": ["core", "frequent", "occasional"],
            "description": "How often this integration is used"
          },
          "apis": {
            "type": "array",
            "items": { "type": "string" },
            "maxItems": 3,
            "description": "Specific functions/classes used (max 3)"
          }
        },
        "required": ["module", "type", "frequency"]
      },
      "maxItems": 8,
      "description": "Key integration points (max 8, focus on most important)"
    },
    "metrics": {
      "type": "object",
      "properties": {
        "linesOfCode": {
          "type": "integer",
          "description": "Approximate lines of code"
        },
        "complexity": {
          "type": "string",
          "enum": ["low", "medium", "high"],
          "description": "Overall complexity assessment"
        },
        "llmUsage": {
          "type": "string",
          "enum": ["none", "light", "moderate", "heavy"],
          "description": "How much the module uses LLMs"
        }
      },
      "description": "Quantitative metrics for sorting/filtering"
    }
  },
  "required": ["purpose", "workingState", "analysis"],
  "additionalProperties": false
}